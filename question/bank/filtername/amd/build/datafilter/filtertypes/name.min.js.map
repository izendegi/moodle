{"version":3,"file":"name.min.js","sources":["../../../src/datafilter/filtertypes/name.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Name filter class extending Keyword filter class.\n *\n * @module     qbank_filtername/datafilter/filtertypes/search\n * @author     Mateusz Grzeszczak <mateusz.grzeszczak@p.lodz.pl>\n * @author     Mateusz Walczak <mateusz.walczak@p.lodz.pl>\n * @copyright  2024 TUL E-Learning Center\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Keyword from 'core/datafilter/filtertypes/keyword';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\n\nexport default class extends Keyword {\n\n    SELECTORS = {\n        filterText: 'input[name=filtername-filtertext]',\n        caseSensitive: 'input[name=filtername-casesensitive]',\n    };\n\n    constructor(filterType, rootNode, initialValues, filterOptions = {filterText: true, caseSensitive: false}) {\n        super(filterType, rootNode, initialValues);\n        this.addCheckboxes(filterOptions.filterText, filterOptions.caseSensitive);\n    }\n\n    /**\n     * Add filter options checkboxes.\n     *\n     * @param {Boolean} filterText\n     * @param {Boolean} caseSensitive\n     */\n    async addCheckboxes(filterText = true, caseSensitive = false) {\n        const filterValueNode = this.getFilterValueNode();\n        const {html} = await Templates.renderForPromise('qbank_filtername/checkboxes', {\n            filtertext: filterText,\n            casesensitive: caseSensitive,\n        });\n        filterValueNode.insertAdjacentHTML('afterend', html);\n    }\n\n    /**\n     * Get the placeholder to use when showing the value selector.\n     *\n     * @return {Promise} Resolving to a String\n     */\n    get placeholder() {\n        return getString('writetext', 'qbank_filtername');\n    }\n\n    /**\n     * Get current states of filter options.\n     *\n     * @return {Array} Filter options states array.\n     */\n    get filterOptions() {\n        return [\n            {\n                name: 'filtertext',\n                value: this.filterRoot.querySelector(this.SELECTORS.filterText).checked\n            },\n            {\n                name: 'casesensitive',\n                value: this.filterRoot.querySelector(this.SELECTORS.caseSensitive).checked\n            }\n        ];\n    }\n}\n"],"names":["Keyword","constructor","filterType","rootNode","initialValues","filterOptions","filterText","caseSensitive","addCheckboxes","filterValueNode","this","getFilterValueNode","html","Templates","renderForPromise","filtertext","casesensitive","insertAdjacentHTML","placeholder","name","value","filterRoot","querySelector","SELECTORS","checked"],"mappings":"kcA6B6BA,iBAOzBC,YAAYC,WAAYC,SAAUC,mBAAeC,qEAAgB,CAACC,YAAY,EAAMC,eAAe,2BACzFL,WAAYC,SAAUC,qBANpB,CACRE,WAAY,oCACZC,cAAe,iLAKVC,cAAcH,cAAcC,WAAYD,cAAcE,yCAS3CD,sEAAmBC,4EAC7BE,gBAAkBC,KAAKC,sBACvBC,KAACA,YAAcC,mBAAUC,iBAAiB,8BAA+B,CAC3EC,WAAYT,WACZU,cAAeT,gBAEnBE,gBAAgBQ,mBAAmB,WAAYL,MAQ/CM,yBACO,kBAAU,YAAa,oBAQ9Bb,0BACO,CACH,CACIc,KAAM,aACNC,MAAOV,KAAKW,WAAWC,cAAcZ,KAAKa,UAAUjB,YAAYkB,SAEpE,CACIL,KAAM,gBACNC,MAAOV,KAAKW,WAAWC,cAAcZ,KAAKa,UAAUhB,eAAeiB"}