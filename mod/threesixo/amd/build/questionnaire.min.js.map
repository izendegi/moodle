{"version":3,"file":"questionnaire.min.js","sources":["../src/questionnaire.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Questionnaire JS module.\n *\n * @module     mod_threesixo/questionnaire\n * @class      questionnaire\n * @copyright  2016 Jun Pataleta <jun@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Notification from 'core/notification';\nimport Ajax from 'core/ajax';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {add as addToast} from 'core/toast';\nimport Pending from 'core/pending';\n\n/**\n * Selectors for the questionnaire page.\n *\n * @type {{questionItem: string, questionnaireTable: string, ratingOption: string, commentItem: string}}\n */\nconst selectors = {\n    commentItem: 'textarea[data-region=\"comment-item\"]',\n    questionnaireTable: '[data-region=\"questionnaire\"]',\n    ratingOption: 'input[type=radio]',\n    questionItem: '[data-region=\"question-item\"]',\n};\n\n/**\n * Array of responses to the items in the questionnaire with item ID for the key and the response for the value.\n */\nconst responses = [];\n\nconst itemIds = [];\n/**\n * Initialiser function.\n */\nexport const init = () => {\n    const pending = new Pending('mod_threesixo/questionnaire-init');\n    registerEvents();\n\n    const questionItems = document.querySelectorAll(selectors.questionItem);\n    questionItems.forEach(option => {\n        itemIds.push(option.dataset.itemid);\n        responses[option.dataset.itemid] = null;\n    });\n\n    const questionnaireTable = document.querySelector(selectors.questionnaireTable);\n    const fromUser = questionnaireTable.dataset.fromuserid;\n    const toUser = questionnaireTable.dataset.touserid;\n    const threesixtyId = questionnaireTable.dataset.threesixtyid;\n\n    const promises = Ajax.call([\n        {\n            methodname: 'mod_threesixo_get_responses',\n            args: {\n                threesixtyid: threesixtyId,\n                fromuserid: fromUser,\n                touserid: toUser\n            }\n        }\n    ]);\n\n    promises[0].then(result => {\n        result.responses.forEach(response => {\n            responses[response.item] = response.value;\n            const responseItemId = parseInt(response.item);\n\n            questionItems.forEach(questionItem => {\n                const questionItemId = parseInt(questionItem.getAttribute('data-itemid'));\n                if (questionItemId === responseItemId) {\n                    const options = questionItem.querySelectorAll(selectors.ratingOption);\n                    if (options.length) {\n                        // Ratings.\n                        options.forEach(option => {\n                            // Mark selected option as selected.\n                            const selectedValue = option.value;\n                            if (selectedValue === response.value) {\n                                handleOptionActivation(option);\n                            }\n                        });\n                    } else {\n                        // Comments.\n                        const commentTextArea = questionItem.querySelector(selectors.commentItem);\n                        if (commentTextArea) {\n                            commentTextArea.value = response.value;\n                        }\n                    }\n                }\n            });\n        });\n        return true;\n    }).then(pending.resolve).catch(Notification.exception);\n};\n\n/**\n * Registers the event listeners for the questionnaire.\n */\nconst registerEvents = () => {\n    document.addEventListener('change', e => {\n        const ratingOption = e.target.closest(selectors.ratingOption);\n        if (ratingOption) {\n            if (ratingOption.checked) {\n                handleOptionActivation(ratingOption);\n            }\n        }\n    });\n\n    document.addEventListener('click', e => {\n        const ratingOption = e.target.closest(selectors.ratingOption);\n        if (ratingOption) {\n            const ratingOptionLabel = ratingOption.closest('label');\n            if (ratingOptionLabel) {\n                ratingOptionLabel.classList.add('focus');\n            }\n        }\n    });\n\n    document.addEventListener('blur', e => {\n        const ratingOption = e.target.closest(selectors.ratingOption);\n        if (ratingOption) {\n            const ratingOptionLabel = ratingOption.closest('label');\n            if (ratingOptionLabel) {\n                ratingOptionLabel.classList.remove('focus');\n            }\n        }\n    });\n\n    const btnSaveFeedback = document.getElementById('save-feedback');\n    btnSaveFeedback.addEventListener('click', (e) => {\n        e.preventDefault();\n        saveResponses(false);\n    });\n\n    const btnSubmitFeedback = document.getElementById('submit-feedback');\n    btnSubmitFeedback.addEventListener('click', (e) => {\n        e.preventDefault();\n        saveResponses(true);\n    });\n};\n\n/**\n * Handles the selection of a rated question's option.\n *\n * @param {HTMLElement} ratingOption The selected option for the given rated question.\n */\nconst handleOptionActivation = ratingOption => {\n    const pending = new Pending('mod_threesixo:handleOptionActivation');\n    const optionGroup = ratingOption.closest(selectors.questionItem);\n    const itemId = optionGroup.getAttribute('data-itemid');\n    const options = optionGroup.querySelectorAll(selectors.ratingOption);\n\n    // Deselect the option that has been selected.\n    options.forEach(option => {\n        const optionLabel = option.nextElementSibling;\n        if (optionLabel.classList.contains('btn-success')) {\n            optionLabel.classList.toggle('btn-success', false);\n            optionLabel.classList.toggle('btn-secondary', true);\n            option.checked = false;\n        }\n    });\n\n    // Mark selected option as selected.\n    const selectedLabel = ratingOption.nextElementSibling;\n    selectedLabel.classList.remove('btn-secondary');\n    selectedLabel.classList.add('btn-success');\n    ratingOption.checked = true;\n\n    // Add this selected value to the array of responses.\n    responses[itemId] = ratingOption.value;\n    pending.resolve();\n};\n\n/**\n * Save the responses.\n *\n * @param {boolean} finalise\n */\nconst saveResponses = finalise => {\n    const comments = document.querySelectorAll(selectors.commentItem);\n    comments.forEach(comment => {\n        responses[comment.dataset.itemid] = comment.value.trim();\n    });\n\n    const questionnaireTable = document.querySelector(selectors.questionnaireTable);\n    const toUser = parseInt(questionnaireTable.dataset.touserid);\n    const toUserFullname = questionnaireTable.dataset.tousername;\n    const threesixtyId = parseInt(questionnaireTable.dataset.threesixtyid);\n    const anonymous = parseInt(questionnaireTable.dataset.anonymous);\n\n    if (anonymous && finalise) {\n        // Show confirmation dialogue to anonymise the feedback responses.\n        const messageStrings = [\n            {\n                key: 'finaliseanonymousfeedback',\n                component: 'mod_threesixo'\n            },\n            {\n                key: 'confirmfinaliseanonymousfeedback',\n                component: 'mod_threesixo',\n                param: {\n                    'name': toUserFullname\n                }\n            }\n        ];\n\n        getStrings(messageStrings, 'mod_threesixo').then(messages => {\n            return showConfirmationDialogue(messages[0], messages[1], threesixtyId, toUser, responses, finalise);\n        }).catch(Notification.exception);\n    } else {\n        // Just save the responses.\n        submitResponses(threesixtyId, toUser, responses, finalise);\n    }\n};\n\n/**\n * Send the responses to the server.\n *\n * @param {number} threesixtyId\n * @param {number} toUser\n * @param {array} responses\n * @param {boolean} finalise\n */\nconst submitResponses = (threesixtyId, toUser, responses, finalise) => {\n    const pending = new Pending('mod_threesixo/submit-responses');\n    let redirectUrl = null;\n    const responsesToSubmit = [];\n    itemIds.forEach(itemId => {\n        responsesToSubmit.push({\n            item: itemId,\n            value: responses[itemId]\n        });\n    });\n    Ajax.call([\n        {\n            methodname: 'mod_threesixo_save_responses',\n            args: {\n                threesixtyid: threesixtyId,\n                touserid: toUser,\n                responses: responsesToSubmit,\n                complete: finalise\n            }\n        }\n    ])[0].then(response => {\n        if (response.result) {\n            redirectUrl = response.redirurl;\n            return getString('responsessaved', 'mod_threesixo');\n        }\n        return getString('errorresponsesavefailed', 'mod_threesixo');\n    }).then(message => {\n        if (!finalise) {\n            // Show toast message when saving the responses but not redirecting.\n            return addToast(message, {});\n        }\n        return true;\n    }).then(() => {\n        pending.resolve();\n        if (finalise && redirectUrl) {\n            const form = document.getElementById('questionnaire');\n            const submitted = document.getElementById('feedback-submitted');\n            submitted.value = 1;\n            form.submit();\n        }\n        return true;\n    }).catch(Notification.exception);\n};\n\n/**\n * Renders the confirmation dialogue to submit and finalise the responses.\n *\n * @param {string} title\n * @param {string} confirmationMessage\n * @param {number} threesixtyId\n * @param {number} toUser\n * @param {Array} responses\n * @param {boolean} finalise\n */\nconst showConfirmationDialogue = async(title, confirmationMessage, threesixtyId, toUser, responses, finalise) => {\n    const confirmButtonText = await getString('finalise', 'mod_threesixo');\n    const confirmModal = await ModalFactory.create({\n        title: title,\n        body: confirmationMessage,\n        large: true,\n        type: ModalFactory.types.SAVE_CANCEL\n    });\n\n    confirmModal.setSaveButtonText(confirmButtonText);\n\n    // Display the dialogue.\n    confirmModal.show();\n\n    // On hide handler.\n    confirmModal.getRoot().on(ModalEvents.hidden, () => {\n        // Empty modal contents when it's hidden.\n        confirmModal.setBody('');\n    });\n\n    confirmModal.getRoot().on(ModalEvents.save, () => {\n        submitResponses(threesixtyId, toUser, responses, finalise);\n    });\n};\n"],"names":["selectors","responses","itemIds","pending","Pending","registerEvents","questionItems","document","querySelectorAll","forEach","option","push","dataset","itemid","questionnaireTable","querySelector","fromUser","fromuserid","toUser","touserid","threesixtyId","threesixtyid","Ajax","call","methodname","args","then","result","response","item","value","responseItemId","parseInt","questionItem","getAttribute","options","length","handleOptionActivation","commentTextArea","resolve","catch","Notification","exception","addEventListener","e","ratingOption","target","closest","checked","ratingOptionLabel","classList","add","remove","getElementById","preventDefault","saveResponses","optionGroup","itemId","optionLabel","nextElementSibling","contains","toggle","selectedLabel","finalise","comment","trim","toUserFullname","tousername","anonymous","messageStrings","key","component","param","messages","showConfirmationDialogue","submitResponses","redirectUrl","responsesToSubmit","complete","redirurl","message","form","submit","async","title","confirmationMessage","confirmButtonText","confirmModal","ModalFactory","create","body","large","type","types","SAVE_CANCEL","setSaveButtonText","show","getRoot","on","ModalEvents","hidden","setBody","save"],"mappings":"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"}