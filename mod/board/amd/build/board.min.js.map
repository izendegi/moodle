{"version":3,"file":"board.min.js","sources":["../src/board.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle the board.\n *\n * @author     Karen Holland <karen@brickfieldlabs.ie>\n * @copyrigt   2021 Brickfield Education Labs <https://www.brickfield.ie/>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from \"jquery\";\nimport {get_strings as getStrings, get_string as getString} from \"core/str\";\nimport Ajax from \"core/ajax\";\nimport ModalCancel from \"core/modal_cancel\";\nimport ModalEvents from \"core/modal_events\";\nimport Notification from \"core/notification\";\nimport \"mod_board/jquery.sortable.amd\";\nimport Comments from \"mod_board/comments\";\nimport moveNotesDialog from \"./movenotesdialog\";\nimport moveColumnsDialog from \"./movecolumnsdialog\";\nimport AjaxFormModal from \"mod_board/ajax_form/modal\";\nimport Url from \"core/url\";\n\n/**\n * Execute a ajax call to a mod_board ajax service.\n *\n * @param {string} method\n * @param {array} args\n * @param {method} callback\n * @param {method} failcallback\n * @private\n */\nconst _serviceCall = function(method, args, callback, failcallback) {\n    Ajax.call([{\n        methodname: 'mod_board_' + method,\n        args: args,\n        done: function(data) {\n            callback(data);\n        },\n        fail: function(error) {\n            Notification.exception(error);\n            if (failcallback) {\n                failcallback(error);\n            }\n        }\n    }]);\n};\n\n/**\n * Indicates if this is a keycode we want to listend to for\n * aria purposes.\n *\n * @returns {boolean}\n * @param {number} key\n */\nconst isAriaTriggerKey = function(key) {\n    return key == 13 || key == 32;\n};\n\n/**\n * Decodes text from html entities.\n *\n * @param {string} encodedText\n * @returns {*|jQuery}\n */\nconst decodeText = function(encodedText) {\n    return $('<div />').html(encodedText).text();\n};\n\n/**\n * Handler for keypress and click actions.\n *\n * @param {object} elem\n * @param {function} callback\n * @returns {*}\n */\nconst handleAction = function(elem, callback) {\n    return elem.on('click keypress', function(e) {\n        if (e.type === 'keypress') {\n            if (isAriaTriggerKey(e.keyCode)) {\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n\n        callback();\n        e.preventDefault();\n    });\n};\n\n/**\n * The default function of the module, which does the setup of the page.\n *\n * @param {object} settings\n */\nexport default function(settings) {\n    // An array of strings to load as a batch later.\n    // Not necessary, but used to load all the strings in one ajax call.\n\n    /* eslint camelcase: off */\n\n    var strings = {\n        default_column_heading: '',\n        post_button_text: '',\n        cancel_button_text: '',\n        remove_note_title: '',\n        remove_note_text: '',\n        remove_column_title: '',\n        note_changed_title: '',\n        note_changed_text: '',\n        note_deleted_text: '',\n        column_deleted_text: '',\n        rate_note_title: '',\n        rate_note_text: '',\n        rate_remove_note_text: '',\n        Ok: '',\n        \"delete\": '',\n        Cancel: '',\n        warning: '',\n        modal_title_new: '',\n        modal_title_edit: '',\n        option_youtube: '',\n        option_image: '',\n        option_link: '',\n        option_file: '',\n\n        aria_newcolumn: '',\n        aria_newpost: '',\n        aria_deletecolumn: '',\n        aria_updatecolumn: '',\n        aria_movecolumn: '',\n        aria_deletepost: '',\n        aria_movepost: '',\n        aria_editpost: '',\n        aria_addmedia: '',\n        aria_addmedianew: '',\n        aria_deleteattachment: '',\n        aria_postedit: '',\n        aria_canceledit: '',\n        aria_postnew: '',\n        aria_cancelnew: '',\n        aria_ratepost: '',\n\n        invalid_youtube_url: '',\n    };\n\n    // Json decode the strings from the settings.\n    var options = JSON.parse(settings.settings) || {};\n    var board = options.board || {};\n\n    const ATTACHMENT_VIDEO = 1,\n          ATTACHMENT_IMAGE = 2,\n          ATTACHMENT_LINK = 3,\n          ATTACHMENT_FILE = 4,\n          SORTBY_DATE = 1,\n          SORTBY_RATING = 2,\n          SORTBY_NONE = 3;\n\n    var reloadTimer = null,\n        lastHistoryId = null,\n        isEditor = options.isEditor || false,\n        usersCanEdit = options.usersCanEdit,\n        userId = parseInt(options.userId) || -1,\n        ownerId = parseInt(options.ownerId),\n        groupId = parseInt(options.groupId),\n        creatingNote = 0,\n        creatingNoteModal = null,\n        updatingNote = 0,\n        updateNoteModal = null,\n        isReadOnlyBoard = options.readonly || false,\n        ratingenabled = options.ratingenabled,\n        sortby = options.sortby || SORTBY_DATE,\n        enableblanktarget = (parseInt(options.enableblanktarget) === 1);\n\n    /**\n     * Helper method to make calls to mod_board external services.\n     *\n     * @param {string} method\n     * @param {array} args\n     * @param {function} callback\n     * @param {function} failcallback\n     */\n    var serviceCall = function(method, args, callback, failcallback) {\n        if (method !== 'board_history') {\n            stopUpdating();\n        }\n        _serviceCall(method, args, function() {\n            if (callback) {\n                callback.apply(null, arguments);\n            }\n            if (method !== 'board_history' && method !== 'get_board') {\n                updateBoard(true);\n            }\n        }, failcallback);\n    };\n\n    /**\n     * Returns the jquery element of a given note identifier.\n     *\n     * @param {number} ident\n     * @returns {jQuery<HTMLElement>}\n     */\n    var getNote = function(ident) {\n        return $(\".board_note[data-ident='\" + ident + \"']\");\n    };\n\n    /**\n     * Returns the jquery element of the note text for the given note element.\n     *\n     * @method getNoteTextForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteTextForNote = function(note) {\n        return $(note).find(\".mod_board_note_text\");\n    };\n\n    /**\n     * Returns the jquery element of the preview for the given note element.\n     *\n     * @method getNotePreviewForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNotePreviewForNote = (note) => {\n        return $(note).find(\".mod_board_preview\");\n    };\n\n\n    /**\n     * Returns the jquery element of the note heading for the given note element.\n     *\n     * @method getNoteHeadingForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteHeadingForNote = function(note) {\n        return $(note).find(\".mod_board_note_heading\");\n    };\n\n    /**\n     * Returns the jquery element of the note border for the given note element.\n     *\n     * @method getNoteBorderForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteBorderForNote = function(note) {\n        return $(note).find(\".mod_board_note_border\");\n    };\n\n    /**\n     * Creates text identifier for a given node.\n     *\n     * @method textIdentifierForNote\n     * @param {object} note\n     * @returns {String}\n     */\n    var textIdentifierForNote = function(note) {\n        return note.attr('data-identifier');\n    };\n\n    /**\n     * Update the Aria info for a given note id.\n     *\n     * @method updateNoteAria\n     * @param {number} noteId\n     */\n    var updateNoteAria = function(noteId) {\n        var note = getNote(noteId),\n            columnIdentifier = note.closest('.board_column').find('.mod_board_column_name').text();\n\n        if (noteId) { // New post\n            var noteIdentifier = decodeText(textIdentifierForNote(note)),\n                deleteNoteString = strings.aria_deletepost.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n\n            note.find('.delete_note').attr('aria-label', deleteNoteString).attr('title', deleteNoteString);\n\n            var moveNoteString = strings.aria_movepost.replace('{post}', noteIdentifier);\n            note.find('.move_note').attr('aria-label', moveNoteString).attr('title', moveNoteString);\n\n            var editNoteString = strings.aria_editpost.replace('{post}', noteIdentifier);\n            note.find('.edit_note').attr('aria-label', editNoteString).attr('title', editNoteString);\n\n            note.find('.mod_board_rating').attr('aria-label', strings.aria_ratepost.replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier));\n            note.find('.note_ariatext').html(noteIdentifier);\n        }\n\n    };\n\n    /**\n     * Update the Aria information for a given column id.\n     *\n     * @method updateColumnAria\n     * @param {number} columnId\n     */\n    var updateColumnAria = function(columnId) {\n        var column = $('.board_column[data-ident=' + columnId + ']'),\n            columnIdentifier = column.find('.mod_board_column_name').text(),\n            newNoteString = strings.aria_newpost.replace('{column}', columnIdentifier),\n            moveColumnString = strings.aria_movecolumn.replace('{column}', columnIdentifier),\n            deleteColumnString = strings.aria_deletecolumn.replace('{column}', columnIdentifier),\n            updateColumnString = strings.aria_updatecolumn.replace('{column}', columnIdentifier);\n        column.find('.newnote').attr('aria-label', newNoteString).attr('title', newNoteString);\n        column.find('.mod_column_move').attr('aria-label', moveColumnString).attr('title', moveColumnString);\n        column.find('.delete_column').attr('aria-label', deleteColumnString).attr('title', deleteColumnString);\n        column.find('.update_column').attr('aria-label', updateColumnString).attr('title', updateColumnString);\n\n        column.find(\".board_note\").each(function(index, note) {\n            updateNoteAria($(note).data('ident'));\n        });\n    };\n\n    /**\n     * Stop the current note creating process.\n     *\n     * @method stopCreatingNote\n     */\n    const stopCreatingNote = function() {\n        if (!creatingNote) {\n            return;\n        }\n\n        if (creatingNoteModal) {\n            creatingNoteModal.destroy();\n        }\n\n        creatingNote = 0;\n        creatingNoteModal = null;\n    };\n\n    /**\n     * Stop the current note updating process.\n     *\n     * @method stopUpdatingNote\n     */\n    const stopUpdatingNote = function() {\n        if (!updatingNote) {\n            return;\n        }\n\n        if (updateNoteModal) {\n            updateNoteModal.destroy();\n        }\n\n        updatingNote = 0;\n        updateNoteModal = null;\n    };\n\n    /**\n     * Delete a given note, by identifier.\n     *\n     * @method deleteNote\n     * @param {number} ident\n     */\n    var deleteNote = function(ident) {\n        Notification.confirm(\n            strings.remove_note_title, // Are you sure?\n            strings.remove_note_text, // This will effect others.\n            strings.delete,\n            strings.Cancel,\n            function() {\n                serviceCall('delete_note', {id: ident}, function(result) {\n                    if (result.status) {\n                        lastHistoryId = result.historyid;\n                        let note = getNote(ident);\n                        if (sortby == SORTBY_NONE) {\n                            let columnID = note.data('column');\n                            let sortorder = note.data('sortorder');\n                            sortAfterDelete(columnID, sortorder);\n                        }\n                        note.remove();\n                    }\n                });\n            }\n        );\n    };\n\n    /**\n     * This function gets a board column as a jQuery element.\n     * @param {number} columnID The column ID.\n     * @returns {jQuery<HTMLElement>}\n     */\n    const getColumn = (columnID) => {\n        return $(`.board_column[data-ident='${columnID}'] .board_column_content`);\n    };\n\n    const sortAfterDelete = (columnID, sortorder) => {\n        let column = getColumn(columnID);\n        let elements = column.children().filter((_, element) => {\n            return parseInt($(element).data('sortorder')) > parseInt(sortorder);\n        });\n        elements.each((_, element) => {\n            let so = $(element).data('sortorder');\n            $(element).data('sortorder', so - 1);\n        });\n    };\n\n    /**\n     * Rate (star) a give note, by identifier.\n     *\n     * @method rateNote\n     * @param {number} ident\n     */\n    var rateNote = function(ident) {\n        if (!ratingenabled) {\n            return;\n        }\n        if (isReadOnlyBoard) {\n            return;\n        }\n\n        var note = getNote(ident),\n            rating = note.find('.mod_board_rating');\n        if (rating.data('disabled')) {\n            return;\n        }\n        rating.data('disabled', true);\n\n        serviceCall('can_rate_note', {id: ident}, function(result) {\n            if (result.canrate) {\n                const rateRemoveText = result.hasrated ? strings.rate_remove_note_text : strings.rate_note_text;\n                Notification.confirm(\n                    strings.rate_note_title,\n                    rateRemoveText, // Are you sure?\n                    strings.Ok,\n                    strings.Cancel,\n                    function() {\n                        serviceCall('rate_note', {id: ident}, function(result) {\n                            if (result.status) {\n                                lastHistoryId = result.historyid;\n                                rating.html(` ${result.rating} `);\n                                if (sortby == SORTBY_RATING) {\n                                    sortNotes(note.closest('.board_column_content'));\n                                }\n                            }\n                            rating.data('disabled', false);\n                        });\n                    }\n                ).then(function(rateModal) {\n                    // Do this here, because it catches both cancel clicks, or someone clicking the X.\n                    rateModal.getRoot().on(ModalEvents.hidden, function() {\n                        rating.data('disabled', false);\n                    });\n                });\n            }\n        });\n    };\n\n    /**\n     * This parses a youtube video ID from a URL. We can use this ID to\n     * construct the embed URL.\n     * @param {string} url The URL entered to the modal.\n     * @returns {string | null} The youtube embed URL or null.\n     */\n    const getEmbedUrl = (url) => {\n        // Thanks for the regex from: https://gist.github.com/rodrigoborgesdeoliveira/987683cfbfcc8d800192da1e73adc486.\n        let regex = /(\\/|%3D|v=)([0-9A-z-_]{11})([%#?&]|$)/;\n        let videoID = url.match(regex);\n        if (!videoID || videoID[2] === undefined || videoID[2].length !== 11) {\n            return null;\n        }\n        return `https://www.youtube-nocookie.com/embed/${videoID[2]}`;\n    };\n\n    /**\n     * Display the attachment preview for a note.\n     *\n     * @method previewAttachment\n     * @param {object} note\n     * @param {object} attachment\n     */\n    var previewAttachment = function(note, attachment) {\n        let elem = note.find('.mod_board_preview');\n\n        if (!getNoteTextForNote(note).html().length) {\n            elem.addClass('mod_board_notext');\n        } else {\n            elem.removeClass('mod_board_notext');\n        }\n\n        elem.removeClass('wrapper_youtube');\n        elem.removeClass('wrapper_image');\n        elem.removeClass('wrapper_url');\n        elem.removeClass('wrapper_file');\n\n        if (attachment.url) {\n            let preview = null;\n            switch (parseInt(attachment.type)) {\n                case ATTACHMENT_VIDEO: { // Youtube\n                    let url = getEmbedUrl(attachment.url);\n                    if (url === null) {\n                        elem.html(strings.invalid_youtube_url);\n                    } else {\n                        elem.html('<iframe src=\"' + url +\n                            '\" class=\"mod_board_preview_element\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;' +\n                            'encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><a href=\"#\" ' +\n                            'class=\"stretched-link\" aria-hidden=\"true\"></a>');\n                        elem.addClass('wrapper_youtube').addClass('position-relative');\n                    }\n                    elem.show();\n                    elem.addClass('wrapper_image');\n                    elem.data('type', 1);\n                    elem.data('info', attachment.info);\n                }\n                break;\n                case ATTACHMENT_IMAGE: // Image file\n                    preview = document.createElement('img');\n                    preview.src = attachment.url;\n                    preview.alt = decodeText(attachment.info);\n                    preview.classList.add('mod_board_preview_element');\n                    elem.html('');\n                    elem.append(preview);\n                    elem.addClass('wrapper_image');\n                    elem.data('type', 2);\n                    elem.data('info', attachment.info);\n                    elem.show();\n                break;\n                case ATTACHMENT_LINK: // Url\n                    preview = document.createElement('a');\n                    preview.href = attachment.url;\n                    preview.text = decodeText(attachment.info);\n                    preview.classList.add('mod_board_preview_element');\n                    if (enableblanktarget) {\n                        preview.target = '_blank';\n                    }\n                    elem.html('');\n                    elem.append(preview);\n                    elem.addClass('wrapper_url');\n                    elem.data('type', 3);\n                    elem.data('info', attachment.info);\n                    elem.show();\n                break;\n                case ATTACHMENT_FILE: // General file\n                    preview = document.createElement('a');\n                    preview.href = attachment.url;\n                    preview.text = decodeText(attachment.info);\n                    preview.classList.add('mod_board_preview_element');\n                    elem.html('');\n                    elem.append(preview);\n                    elem.addClass('wrapper_file');\n                    elem.data('type', 4);\n                    elem.data('info', attachment.info);\n                    elem.show();\n                    break;\n                default:\n                    elem.html('');\n                    elem.data('type', 0);\n                    elem.data('info', '');\n                    elem.hide();\n            }\n        } else {\n            elem.html('');\n            elem.hide();\n        }\n    };\n\n    /**\n     * Add a new note with the given information.\n     *\n     * @method addNote\n     * @param {number} columnid\n     * @param {number} ident\n     * @param {String} identifier name of note\n     * @param {string} heading\n     * @param {string} content\n     * @param {object} attachment\n     * @param {object} owner\n     * @param {number} sortorder\n     * @param {string} rating\n     */\n    var addNote = function(columnid, ident, identifier, heading, content, attachment, owner, sortorder, rating) {\n        var ismynote = owner.id == userId || !ident;\n        var iseditable = isEditor || (ismynote && !isReadOnlyBoard);\n\n        if (!ident) {\n            // Nothing to do.\n            return;\n        }\n\n        // Making space for this note if necessary in the sort order.\n        if (sortby == SORTBY_NONE) {\n            let children = $(`.board_column[data-ident='${columnid}'] .board_column_content`).children();\n            let elements = children.filter((_, element) => {\n                return parseInt($(element).data('sortorder')) >= parseInt(sortorder);\n            });\n            elements.each((_, element) => {\n                let so = $(element).data('sortorder');\n                $(element).data('sortorder', so + 1);\n            });\n        }\n\n        var note = $('<div class=\"board_note\" data-column=\"' + columnid + '\" data-ident=\"' + ident +\n            '\" data-sortorder=\"' + sortorder + '\"></div>');\n        note.attr('data-identifier', identifier);\n\n        if (ismynote) {\n            note.addClass('mod_board_mynote');\n        }\n        if (iseditable) {\n            note.addClass('mod_board_editablenote');\n        }\n        if (!ismynote && !iseditable) {\n            note.addClass('mod_board_nosort');\n        }\n\n        var notecontent = $('<div class=\"mod_board_note_content\"></div>'),\n            notecontrols = $('<div class=\"mod_board_note_controls\"></div>'),\n            noteHeading = $('<div class=\"mod_board_note_heading\" tabindex=\"0\">' + (heading ? heading : '') + '</div>'),\n            noteBorder = $('<div class=\"mod_board_note_border\"></div>'),\n            noteText = $('<div class=\"mod_board_note_text\" tabindex=\"0\">' + (content ? content : '') + '</div>'),\n            noteAriaText = $('<div class=\"note_ariatext hidden\" role=\"heading\" aria-level=\"4\" tabindex=\"0\"></div>'),\n            attachmentPreview = $('<div class=\"mod_board_preview\"></div>');\n\n        notecontent.append(noteHeading);\n        notecontent.append(noteBorder);\n        notecontent.append(noteText);\n        notecontent.append(noteAriaText);\n\n        notecontent.append(attachmentPreview);\n        note.append(notecontent);\n\n        var columnContent = $('.board_column[data-ident=' + columnid + '] .board_column_content');\n\n        if (ratingenabled) {\n            note.addClass('mod_board_rateablenote');\n            var rateElement = $(`<div class=\"fa fa-star mod_board_rating\" role=\"button\" tabindex=\"0\"> ${rating} </div>`);\n\n            handleAction(rateElement, () => {\n                rateNote(ident);\n            });\n            notecontrols.append(rateElement);\n        }\n\n        if (iseditable) {\n            var removeElement = $('<div class=\"fa fa-remove delete_note\" role=\"button\" tabindex=\"0\"></div>');\n            handleAction(removeElement, () => {\n                deleteNote(ident);\n            });\n\n            notecontrols.append(removeElement);\n\n            if (usersCanEdit == 1 || isEditor) {\n                var moveElement = $('<div class=\"mod_board_move fa fa-arrows move_note\" role=\"button\" tabindex=\"0\"></div>');\n                notecontrols.append(moveElement);\n                moveNotesDialog.init(moveNote);\n            }\n\n            var editElement = $('<div class=\"mod_board_move fa fa-pencil edit_note\" role=\"button\" tabindex=\"0\"></div>');\n            notecontrols.append(editElement);\n            handleAction(editElement, () => {\n                showNoteUpdateModal(ident);\n            });\n            updateSortable();\n        }\n        previewAttachment(note, attachment);\n\n        note.append(notecontrols);\n\n        handleAction(notecontent, () => fullScreenNote(ident, notecontent));\n\n        if (!noteHeading.html()) {\n            noteHeading.hide();\n            noteBorder.hide();\n        }\n        if (!noteText.html() && noteHeading.html()) {\n            noteText.hide();\n            noteBorder.hide();\n        }\n\n        var lastOne = columnContent.find(\".board_note\").last();\n\n        if (lastOne.length) {\n            note.insertAfter(lastOne);\n        } else {\n            columnContent.prepend(note);\n        }\n    };\n\n    /**\n     * Add a new column.\n     *\n     * @method addColumn\n     * @param {object} ident\n     * @param {string} name\n     * @param {bool} locked\n     * @param {array} notes\n     * @param {string} colour\n     */\n    var addColumn = function(ident, name, locked, notes, colour) {\n        let headerStyle = `style=\"border-top: 10px solid #${colour}\"`;\n        var iseditable = isEditor,\n            column = $(`<div class=\"board_column board_column_hasdata\" data-locked=\"${locked}\"\\\n                 ${headerStyle} data-ident=\"${ident}\"></div>`),\n            columnHeader = $('<div class=\"board_column_header\"></div>'),\n            columnSort = $('<div class=\"mod_board_column_sort fa\"></div>'),\n            columnName = $('<div class=\"mod_board_column_name\" tabindex=\"0\" aria-level=\"3\" role=\"heading\">' + name + '</div>'),\n            columnContent = $('<div class=\"board_column_content\"></div>'),\n            columnNewContent = $('<div class=\"board_column_newcontent\"></div>');\n        // Only add the sort button if it makes sense.\n        if (sortby != SORTBY_NONE) {\n            columnHeader.append(columnSort);\n        }\n        columnHeader.append(columnName);\n\n        if (options.hideheaders) {\n            columnName.addClass('d-none');\n        }\n\n        columnSort.on('click', function() {\n            sortNotes(columnContent, true);\n        });\n\n        if (iseditable) {\n            column.addClass('mod_board_editablecolumn');\n            const lockIcon = locked ? 'fa-lock' : 'fa-unlock';\n            const lockElement = $(`<div class=\"icon fa ${lockIcon} lock_column\" role=\"button\" tabindex=\"0\"></div>`);\n            const lockstring = locked ? 'aria_column_locked' : 'aria_column_unlocked';\n            getString(lockstring, 'mod_board', decodeText(name)).done(function(str) {\n                lockElement.attr('aria-label', str);\n                lockElement.attr('title', str);\n            });\n\n            handleAction(lockElement, () => {\n                const lockColumn = column.attr('data-locked') !== 'true';\n                serviceCall('lock_column', {id: ident, status: lockColumn}, function(result) {\n                    const columnName = column.find('.mod_board_column_name').text();\n                    if (result.status) {\n                        if (lockColumn) {\n                            lockElement.removeClass('fa-unlock').addClass('fa-lock');\n                            column.attr('data-locked', 'true');\n                            column.find('.board_button.newnote').addClass('d-none');\n                            getString('aria_column_locked', 'mod_board', columnName).done(function(str) {\n                                lockElement.attr('aria-label', str);\n                                lockElement.attr('title', str);\n                            });\n                        } else {\n                            lockElement.removeClass('fa-lock').addClass('fa-unlock');\n                            column.attr('data-locked', 'false');\n                            column.find('.board_button.newnote').removeClass('d-none');\n                            getString('aria_column_unlocked', 'mod_board', columnName).done(function(str) {\n                                lockElement.attr('aria-label', str);\n                                lockElement.attr('title', str);\n                            });\n                        }\n                        lastHistoryId = result.historyid;\n                        updateSortable();\n                    }\n                });\n            });\n            columnHeader.append(lockElement);\n\n            var removeElement = $('<div class=\"icon fa fa-remove delete_column\" role=\"button\" tabindex=\"0\"></div>');\n            handleAction(removeElement, () => {\n                Notification.confirm(\n                    strings.remove_column_title, // Are you sure?\n                    getString('remove_column_text', 'mod_board', getColumnName(ident)),\n                    strings.delete,\n                    strings.Cancel,\n                    function() {\n                        serviceCall('delete_column', {id: ident}, function(result) {\n                            if (result.status) {\n                                column.remove();\n                                lastHistoryId = result.historyid;\n                            }\n                        });\n                    }\n                );\n            });\n            columnHeader.append(removeElement);\n\n            columnHeader.addClass('icon-size-3');\n            const moveElement = $('<div class=\"icon fa fa-arrows mod_column_move\" role=\"button\" tabindex=\"0\"></div>');\n            columnHeader.append(moveElement);\n            moveColumnsDialog.init(moveColumn);\n\n            var updateElement = $('<div class=\"icon fa fa-pencil update_column\" role=\"button\" tabindex=\"0\"></div>');\n            handleAction(updateElement, () => {\n                showColumnUpdateModal(ident);\n            });\n            columnHeader.append(updateElement);\n        }\n\n        column.append(columnHeader);\n        column.append(columnContent);\n        column.append(columnNewContent);\n\n        if (!isReadOnlyBoard) {\n            const newNoteButton = $('<div class=\"board_button newnote\" role=\"button\" tabindex=\"0\">' +\n            '<div class=\"button_content\"><span class=\"fa ' + options.noteicon + '\"></span></div></div>');\n            columnNewContent.append(newNoteButton);\n            if (column.attr('data-locked') === 'true') {\n                newNoteButton.addClass('d-none');\n            }\n            handleAction(columnNewContent.find('.newnote'), function() {\n                showNoteCreateModal(ident);\n            });\n        }\n\n        var lastOne = $(\".mod_board .board_column_hasdata\").last();\n        if (lastOne.length) {\n            column.insertAfter(lastOne);\n        } else {\n            $(\".mod_board\").append(column);\n        }\n\n        if (notes) {\n            for (var index in notes) {\n                let sortorder = sortby == 3 ? notes[index].sortorder : notes[index].timecreated;\n                addNote(ident, notes[index].id, notes[index].identifier, notes[index].heading, notes[index].content,\n                    {type: notes[index].type, info: notes[index].info, url: notes[index].url},\n                    {id: notes[index].userid}, sortorder, notes[index].rating);\n            }\n        }\n        sortNotes(columnContent);\n        updateColumnAria(ident);\n        if (isEditor || usersCanEdit == 1) {\n            updateSortable();\n        }\n        if (isEditor) {\n            columnSorting();\n        }\n    };\n\n    /**\n     * Gets the text name used in the heading of a column.\n     * @param {number} id The ID data attribute on the column element.\n     * @returns {string}\n     */\n    const getColumnName = (id) => {\n        return $(`.board_column[data-ident='${id}']`).find('.mod_board_column_name').html();\n    };\n\n    /**\n     * Add the new column button.\n     *\n     * @method addNewColumnButton\n     */\n    var addNewColumnButton = function() {\n        var column = $('<div class=\"board_column_empty\"></div>');\n        column.append('<div class=\"board_button newcolumn\" role=\"button\" tabindex=\"0\" aria-label=\"' +\n            strings.aria_newcolumn + '\" title=\"' + strings.aria_newcolumn + '\"><div class=\"button_content\"><span class=\"fa '\n            + options.columnicon + '\"></span></div></div>');\n\n        handleAction(column.find('.newcolumn'), function() {\n            showColumnCreateModal(board.id);\n        });\n\n        $(\".mod_board\").append(column);\n    };\n\n    /**\n     * This selects the next heading colour from options based on the count of the\n     * current columns. Length of decremented by one as the new column button is\n     * also denoted as a column.\n     * @returns {string} colour hex string.\n     */\n    const selectHeadingColour = () => {\n        let colCount = $('.board_column').length - 1;\n        let colourCount = options.colours.length;\n        return options.colours[colCount % colourCount];\n    };\n\n    /**\n     * Update a note with the provided information.\n     *\n     * @method updateNote\n     * @param {object} note\n     * @param {string} heading\n     * @param {object} data\n     */\n    var updateNote = function(note, heading, data) {\n        var noteHeading = getNoteHeadingForNote(note);\n        var noteText = getNoteTextForNote(note);\n        var noteBorder = getNoteBorderForNote(note);\n\n        note.attr('data-identifier', data.identifier);\n        noteText.html(data.content);\n        noteHeading.html(data.heading);\n        previewAttachment(note, data.attachment);\n        updateNoteAria(data.id);\n\n        // Reset the visibility state.\n        noteHeading.show();\n        noteBorder.show();\n        noteText.show();\n        if (!noteHeading.html()) {\n            noteHeading.hide();\n            noteBorder.hide();\n        }\n        if (!noteText.html() && noteHeading.html()) {\n            noteText.hide();\n            noteBorder.hide();\n        }\n    };\n\n    /**\n     * Fetch and process the recent board history.\n     *\n     * @method processBoardHistory\n     */\n    var processBoardHistory = function() {\n        let payload = {id: board.id, ownerid: ownerId, groupid: groupId, since: lastHistoryId};\n        serviceCall('board_history', payload, function(boardhistory) {\n            for (var index in boardhistory) {\n                var item = boardhistory[index];\n                if (item.boardid != board.id) {\n                    continue; // Hmm\n                }\n\n                var data = JSON.parse(item.content);\n                if (item.action === 'add_note') {\n                    let sortorder = sortby == 3 ? data.sortorder : data.timecreated;\n                    addNote(data.columnid, data.id, data.identifier, data.heading, data.content, data.attachment,\n                        {id: item.userid}, sortorder, data.rating);\n                    updateNoteAria(data.id);\n                    sortNotes($('.board_column[data-ident=' + data.columnid + '] .board_column_content'));\n                } else if (item.action === 'update_note') {\n                    let note = getNote(data.id);\n                    if (note) {\n                        let noteHeading = getNoteHeadingForNote(note);\n\n                        if (updatingNote == data.id) {\n                            Notification.confirm(\n                                strings.note_changed_title, // Confirm.\n                                strings.note_changed_text, // Are you sure?\n                                strings.Ok,\n                                strings.Cancel,\n                                function() {\n                                    stopUpdatingNote();\n                                }\n                            );\n                        } else {\n                            updateNote(note, noteHeading, data);\n                        }\n                    }\n                } else if (item.action === 'delete_note') {\n                    if (updatingNote == data.id) {\n                        // eslint-disable-next-line promise/catch-or-return,promise/always-return\n                        Notification.alert(strings.warning, strings.note_deleted_text).then(() => {\n                            stopUpdatingNote();\n                        });\n                    }\n                    let note = getNote(data.id);\n                    if (sortby == SORTBY_NONE) {\n                        let columnID = note.data('column');\n                        let sortorder = note.data('sortorder');\n                        sortAfterDelete(columnID, sortorder);\n                    }\n                    note.remove();\n\n                } else if (item.action === 'add_column') {\n                    addColumn(data.id, data.name, false, {}, selectHeadingColour());\n                } else if (item.action === 'move_column') {\n                    const board = $('.mod_board');\n                    data.sortorder.forEach(column => {\n                        const columnElement = board.find(`.board_column[data-ident='${column}']`);\n                        columnElement.detach().appendTo(board);\n                    });\n                } else if (item.action === 'update_column') {\n                    $(\".board_column[data-ident='\" + data.id + \"'] .mod_board_column_name\").html(data.name);\n                    updateColumnAria(data.id);\n                } else if (item.action === 'lock_column') {\n                    $(\".board_column[data-ident='\" + data.id + \"']\").attr(\"data-locked\", data.locked);\n                    if (data.locked) {\n                        $(\".board_column[data-ident='\" + data.id + \"']\").find('.board_button.newnote').addClass('d-none');\n                    } else {\n                        $(\".board_column[data-ident='\" + data.id + \"']\").find('.board_button.newnote').removeClass('d-none');\n                    }\n                    updateSortable();\n                } else if (item.action === 'delete_column') {\n                    var column = $(\".board_column[data-ident='\" + data.id + \"']\");\n                    if (updatingNote && column.find('.board_note[data-ident=\"' + updatingNote + '\"]').length) {\n                        // eslint-disable-next-line promise/catch-or-return,promise/always-return\n                        Notification.alert(strings.warning, strings.column_deleted_text).then(() => {\n                            stopUpdatingNote();\n                        });\n                    }\n                    if (creatingNote == data.id) {\n                        // eslint-disable-next-line promise/catch-or-return,promise/always-return\n                        Notification.alert(strings.warning, strings.column_deleted_text).then(() => {\n                            stopCreatingNote();\n                        });\n                    }\n                    column.remove();\n                } else if (item.action === 'rate_note') {\n                    var note = getNote(data.id);\n                    note.find('.mod_board_rating').html(data.rating);\n                    if (sortby == SORTBY_RATING) {\n                        sortNotes(note.closest('.board_column_content'));\n                    }\n                }\n                lastHistoryId = item.id;\n            }\n\n            updateBoard();\n        });\n    };\n\n    /**\n     * Trigger a board update.\n     *\n     * @method updateBoard\n     * @param {boolean} instant\n     */\n    var updateBoard = function(instant) {\n        if (instant) {\n            processBoardHistory();\n        } else if (options.history_refresh > 0) {\n            if (reloadTimer) {\n                stopUpdating();\n            }\n            reloadTimer = setTimeout(processBoardHistory, options.history_refresh * 1000);\n        }\n    };\n\n    /**\n     * Stop/prevent the board reload timer from firing.\n     *\n     * @method stopUpdating\n     */\n    var stopUpdating = function() {\n        clearTimeout(reloadTimer);\n        reloadTimer = null;\n    };\n\n    /**\n     * Sort a set of notes.\n     *\n     * @sortNotes\n     * @param {string} content\n     * @param {boolean} toggle\n     */\n    var sortNotes = function(content, toggle) {\n        var sortCol = $(content).parent().find('.mod_board_column_sort'),\n            direction = $(content).data('sort');\n        if (!direction) {\n            if (sortby == SORTBY_RATING) {\n                direction = 'desc';\n            } else {\n                direction = 'asc';\n            }\n        }\n        if (toggle) {\n            direction = direction === 'asc' ? 'desc' : 'asc';\n        }\n\n        if (direction === 'asc') {\n            sortCol.removeClass('fa-angle-down');\n            sortCol.addClass('fa-angle-up');\n        } else {\n            sortCol.removeClass('fa-angle-up');\n            sortCol.addClass('fa-angle-down');\n        }\n        $(content).data('sort', direction);\n\n        var desc,\n            asc;\n        if (sortby == SORTBY_DATE) {\n            desc = function(a, b) {\n                return $(b).data(\"sortorder\") - $(a).data(\"sortorder\");\n            };\n            asc = function(a, b) {\n                return $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n        } else if (sortby == SORTBY_RATING) {\n            desc = function(a, b) {\n                return $(b).find('.mod_board_rating').text() - $(a).find('.mod_board_rating').text() ||\n                $(b).data(\"sortorder\") - $(a).data(\"sortorder\");\n            };\n            asc = function(a, b) {\n                return $(a).find('.mod_board_rating').text() - $(b).find('.mod_board_rating').text() ||\n                $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n        } else if (sortby == SORTBY_NONE) {\n            let sortElements = (a, b) => {\n                return $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n            $('> .board_note', $(content)).sort(sortElements).appendTo($(content));\n            return;\n        }\n\n        $('> .board_note', $(content)).sort(direction === 'asc' ? asc : desc).appendTo($(content));\n\n    };\n\n    /**\n     * Update sorting of sortable content.\n     *\n     * @method updateSortable\n     */\n    var updateSortable = function() {\n        let fromColumnID;\n        $(\".board_column[data-locked='false'] .board_column_content\").sortable({\n            connectWith: \".board_column[data-locked='false'] .board_column_content\",\n            cancel: \".mod_board_nosort\",\n            handle: \".move_note\",\n            start: function(_, ui) {\n                fromColumnID = $(ui.item).closest('.board_column').data('ident');\n            },\n            stop: function(_, ui) {\n                var note = $(ui.item),\n                    tocolumn = note.closest('.board_column'),\n                    elem = $(this),\n                    noteid = note.data('ident'),\n                    columnid = tocolumn.data('ident');\n                let columnElements = tocolumn.find('.board_column_content').children();\n                let sortorder = columnElements.index($(`.board_note[data-ident=${noteid}]`));\n                let payload = {\n                    id: noteid,\n                    columnid: columnid,\n                    sortorder: sortorder\n                };\n                moveNote(fromColumnID, payload, elem);\n            }\n        });\n    };\n\n    /**\n     * Move a note to a new position / column.\n     *\n     * @param {Int} fromColumnID The column the note is being moved from.\n     * @param {Object} payload The payload to send to the server.\n     * @param {Domnode} elem The element clicked to trigger the move.\n     */\n    const moveNote = (fromColumnID, payload, elem) => {\n        updateSortOrders(fromColumnID, payload.columnid, payload.id, payload.sortorder);\n\n        serviceCall('move_note', payload, (result) => {\n            if (result.status) {\n                lastHistoryId = result.historyid;\n                updateNoteAria(payload.id);\n                updateBoard();\n                sortNotes($(`.board_column[data-ident=${payload.columnid}] .board_column_content`));\n            } else {\n                if (elem) {\n                    elem.sortable('cancel');\n                }\n            }\n        });\n    };\n\n    /**\n     * Enable column sorting\n     */\n    const columnSorting = () => {\n        let movingColumnId;\n        $(\".mod_board\").sortable({\n            connectWith: \".mod_board\",\n            axis: \"x\",\n            containment: \".mod_board_wrapper\",\n            cancel: \".mod_board_nosort\",\n            handle: \".mod_column_move\",\n            start: function(_, ui) {\n                movingColumnId = $(ui.item).closest('.board_column').data('ident');\n            },\n            stop: function(_, ui) {\n                let column = $(ui.item);\n                let columns = $(\".mod_board\").find('.board_column');\n                let sortorder = columns.index(column);\n                let payload = {\n                    id: movingColumnId,\n                    sortorder: sortorder\n                };\n                moveColumn(payload);\n            }\n        });\n    };\n\n    /**\n     * Move a column to a new position.\n     *\n     * @param {Object} payload The payload to send to the server.\n     */\n    const moveColumn = (payload) => {\n        serviceCall('move_column', payload, false);\n    };\n\n    /**\n     * Updates the inline data attributes necessary for rendering the lists\n     * in the correct sort order. Note: the data attribute values updated by\n     * jQuery are not reflected in DOM inspection but are still set.\n     * @param {number} fromColumnID The column ID of the column to sort.\n     * @param {number} toColumnID The column ID of the column to sort.\n     * @param {number} noteID  The note ID that was moved.\n     * @param {number} newSortOrder The new position of the note sort order.\n     */\n    const updateSortOrders = (fromColumnID, toColumnID, noteID, newSortOrder) => {\n        let toColumn = $(`.board_column[data-ident=${toColumnID}] .board_column_content`);\n        let movedNote = $(`.board_note[data-ident=${noteID}]`);\n        let oldSortOrder = movedNote.data('sortorder');\n        // Check whether it is the same column and then increment or decrement notes above or below\n        // then set sortorder according to whether the sortorder has moved up or down.\n        let toChildren = toColumn.children();\n        if (fromColumnID == toColumnID) {\n            toChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (oldSortOrder < newSortOrder) {\n                    if (sortOrder <= newSortOrder && sortOrder >= oldSortOrder) {\n                        $(note).data('sortorder', sortOrder - 1);\n                    }\n                } else if (oldSortOrder > newSortOrder) {\n                    if (sortOrder >= newSortOrder && sortOrder <= oldSortOrder) {\n                        $(note).data('sortorder', sortOrder + 1);\n                    }\n                }\n            });\n        } else {\n            let fromColumn = $(`.board_column[data-ident=${fromColumnID}] .board_column_content`);\n            let fromChildren = fromColumn.children();\n            toChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (sortOrder >= newSortOrder) {\n                    $(note).data('sortorder', sortOrder + 1);\n                }\n            });\n            fromChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (sortOrder > oldSortOrder) {\n                    $(note).data('sortorder', sortOrder - 1);\n                }\n            });\n        }\n        movedNote.data('sortorder', newSortOrder);\n    };\n\n    /**\n     * Show modal for note creation.\n     *\n     * @param {Number} columnId\n     */\n    const showNoteCreateModal = function(columnId) {\n        const urlParams = {'columnid': columnId, 'ownerid': ownerId, 'groupid': groupId};\n        const formUrl = Url.relativeUrl('/mod/board/note_create_ajax.php', urlParams, false);\n\n        let submittedCallback = (result) => {\n            creatingNote = 0;\n            creatingNoteModal = null;\n\n            lastHistoryId = result.historyid;\n            addNote(columnId, result.note.id, result.note.identifier, result.note.heading, result.note.content,\n                {type: result.note.type, info: result.note.info, url: result.note.url},\n                {id: result.note.userid}, result.note.timecreated, result.note.rating);\n            sortNotes($('.board_column[data-ident=' + columnId + '] .board_column_content'));\n            updateNoteAria(result.note.id);\n        };\n\n        const modalConfig = {\n            'formUrl': formUrl,\n            'formSize': 'lg',\n            'formSubmittedAction': submittedCallback,\n        };\n\n        // eslint-disable-next-line promise/catch-or-return,promise/always-return\n        AjaxFormModal.create(modalConfig).then((modal) => {\n            creatingNote = columnId;\n            creatingNoteModal = modal;\n            creatingNoteModal.getRoot().on(ModalEvents.hidden, () => {\n                creatingNote = 0;\n                creatingNoteModal = null;\n            });\n        });\n    };\n\n    /**\n     * Show modal for column creation.\n     *\n     * @param {Number} boardID\n     */\n    const showColumnCreateModal = function(boardID) {\n        const urlParams = {'boardid': boardID};\n        const formUrl = Url.relativeUrl('/mod/board/column_create_ajax.php', urlParams, false);\n\n        const modalConfig = {\n            'formUrl': formUrl,\n            'formSize': 'sm',\n            'formSubmittedAction': 'reload',\n        };\n\n        AjaxFormModal.create(modalConfig);\n    };\n\n    /**\n     * Show modal for column update.\n     *\n     * @param {Number} columnId\n     */\n    const showColumnUpdateModal = function(columnId) {\n        const urlParams = {'id': columnId};\n        const formUrl = Url.relativeUrl('/mod/board/column_update_ajax.php', urlParams, false);\n\n        const modalConfig = {\n            'formUrl': formUrl,\n            'formSize': 'sm',\n            'formSubmittedAction': 'reload',\n        };\n\n        AjaxFormModal.create(modalConfig);\n    };\n\n    /**\n     * Show modal for note updates.\n     *\n     * @param {Number} noteId\n     */\n    const showNoteUpdateModal = function(noteId) {\n        const urlParams = {'id': noteId};\n        const formUrl = Url.relativeUrl('/mod/board/note_update_ajax.php', urlParams, false);\n\n        let submittedCallback = (result) => {\n            updatingNote = 0;\n            updateNoteModal = null;\n\n            // Updated existing note.\n            const note = getNote(noteId);\n            lastHistoryId = result.historyid;\n            note.attr('data-identifier', result.note.identifier);\n            getNoteTextForNote(note).html(result.note.content);\n            getNoteHeadingForNote(note).html(result.note.heading);\n            updateNoteAria(result.note.id);\n            previewAttachment(note, {\n                type: result.note.type,\n                info: result.note.info, url: result.note.url\n            });\n        };\n\n        const modalConfig = {\n            'formUrl': formUrl,\n            'formSize': 'lg',\n            'formSubmittedAction': submittedCallback,\n        };\n\n        // eslint-disable-next-line promise/catch-or-return,promise/always-return\n        AjaxFormModal.create(modalConfig).then((modal) => {\n            updatingNote = noteId;\n            updateNoteModal = modal;\n            updateNoteModal.getRoot().on(ModalEvents.hidden, () => {\n                updatingNote = 0;\n                updateNoteModal = null;\n            });\n        });\n    };\n\n    /**\n     * Show the note in a modal\n     * @param {Int} ident The note id\n     * @param {Object} notecontent The note content\n     */\n    var fullScreenNote = (ident, notecontent) => {\n        const heading = getNoteHeadingForNote(notecontent).html();\n        const modalBody = $(document.createElement('div'));\n        modalBody.addClass('mod_board_note_content');\n        const text = getNoteTextForNote(notecontent);\n        if (text) {\n            modalBody.append(text.clone());\n        }\n        const preview = getNotePreviewForNote(notecontent);\n        if (preview) {\n            modalBody.append(preview.clone());\n        }\n\n        // Adds the comments to a note.\n        const commentArea = $(document.createElement('div'));\n        commentArea.attr('data-region', 'comment-area');\n        modalBody.append(commentArea);\n        Comments.fetchFor(ident, commentArea);\n\n        ModalCancel.create({\n            title: heading,\n            body: modalBody,\n        }).then(function(modal) {\n            modal.setLarge();\n            getString('close_button_text', 'mod_board').done(function(str) {\n                modal.setButtonText('cancel', str);\n            });\n            modal.show();\n            // Handle hidden event.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                // Destroy when hidden.\n                modal.destroy();\n            });\n            return modal;\n        }, this).catch(Notification.exception);\n    };\n\n    /**\n     * Initialize board.\n     *\n     * @method init\n     */\n    var init = function() {\n        serviceCall('get_board', {id: board.id, ownerid: ownerId, groupid: groupId}, function(columns) {\n            // Init\n            if (columns) {\n                for (var index in columns) {\n                    addColumn(\n                        columns[index].id,\n                        columns[index].name,\n                        columns[index].locked,\n                        columns[index].notes || {},\n                        options.colours[columns[index].id % options.colours.length]\n                    );\n                }\n            }\n\n            if (isEditor) {\n                addNewColumnButton();\n            }\n\n            lastHistoryId = board.historyid;\n\n            if (isEditor) {\n                updateSortable();\n                columnSorting();\n            }\n\n            updateBoard();\n        });\n    };\n\n    // Get strings\n    var stringsInfo = [];\n    for (var string in strings) {\n        stringsInfo.push({key: string, component: 'mod_board'});\n    }\n\n    $.when(getStrings(stringsInfo)).done(function(results) {\n        var index = 0;\n        for (string in strings) {\n            strings[string] = results[index++];\n        }\n\n        init();\n    });\n}\n"],"names":["settings","strings","default_column_heading","post_button_text","cancel_button_text","remove_note_title","remove_note_text","remove_column_title","note_changed_title","note_changed_text","note_deleted_text","column_deleted_text","rate_note_title","rate_note_text","rate_remove_note_text","Ok","Cancel","warning","modal_title_new","modal_title_edit","option_youtube","option_image","option_link","option_file","aria_newcolumn","aria_newpost","aria_deletecolumn","aria_updatecolumn","aria_movecolumn","aria_deletepost","aria_movepost","aria_editpost","aria_addmedia","aria_addmedianew","aria_deleteattachment","aria_postedit","aria_canceledit","aria_postnew","aria_cancelnew","aria_ratepost","invalid_youtube_url","options","JSON","parse","board","reloadTimer","lastHistoryId","isEditor","usersCanEdit","userId","parseInt","ownerId","groupId","creatingNote","creatingNoteModal","updatingNote","updateNoteModal","isReadOnlyBoard","readonly","ratingenabled","sortby","enableblanktarget","serviceCall","method","args","callback","failcallback","stopUpdating","call","methodname","done","data","fail","error","exception","_serviceCall","apply","arguments","updateBoard","getNote","ident","getNoteTextForNote","note","find","getNoteHeadingForNote","updateNoteAria","noteId","columnIdentifier","closest","text","noteIdentifier","decodeText","attr","textIdentifierForNote","deleteNoteString","replace","moveNoteString","editNoteString","html","updateColumnAria","columnId","column","newNoteString","moveColumnString","deleteColumnString","updateColumnString","each","index","stopUpdatingNote","destroy","sortAfterDelete","columnID","sortorder","getColumn","children","filter","_","element","so","previewAttachment","attachment","elem","length","removeClass","addClass","url","preview","type","videoID","match","undefined","getEmbedUrl","show","info","document","createElement","src","alt","classList","add","append","href","target","hide","addNote","columnid","identifier","heading","content","owner","rating","ismynote","id","iseditable","notecontent","notecontrols","noteHeading","noteBorder","noteText","noteAriaText","attachmentPreview","columnContent","rateElement","handleAction","result","canrate","rateRemoveText","hasrated","confirm","status","historyid","sortNotes","then","rateModal","getRoot","on","ModalEvents","hidden","rateNote","removeElement","delete","remove","deleteNote","moveElement","init","moveNote","editElement","showNoteUpdateModal","updateSortable","fullScreenNote","lastOne","last","insertAfter","prepend","addColumn","name","locked","notes","colour","headerStyle","columnHeader","columnSort","columnName","columnNewContent","hideheaders","lockIcon","lockElement","lockstring","str","lockColumn","getColumnName","moveColumn","updateElement","showColumnUpdateModal","newNoteButton","noteicon","showNoteCreateModal","timecreated","userid","columnSorting","selectHeadingColour","colCount","colourCount","colours","updateNote","getNoteBorderForNote","processBoardHistory","payload","ownerid","groupid","since","boardhistory","item","boardid","action","alert","forEach","detach","appendTo","instant","history_refresh","setTimeout","clearTimeout","toggle","desc","asc","sortCol","parent","direction","a","b","sortElements","sort","fromColumnID","sortable","connectWith","cancel","handle","start","ui","stop","tocolumn","this","noteid","updateSortOrders","movingColumnId","axis","containment","toColumnID","noteID","newSortOrder","toColumn","movedNote","oldSortOrder","toChildren","sortOrder","fromChildren","urlParams","modalConfig","Url","relativeUrl","create","modal","showColumnCreateModal","boardID","modalBody","clone","commentArea","fetchFor","title","body","setLarge","setButtonText","catch","Notification","columns","columnicon","stringsInfo","string","push","key","component","when","results","encodedText","e","keyCode","preventDefault"],"mappings":"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"}