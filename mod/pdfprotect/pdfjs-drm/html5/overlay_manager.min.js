"use strict";(function(root,factory){if(typeof define==="function"&&define.amd){define("pdfjs-web/overlay_manager",["exports"],factory)}else if(typeof exports!=="undefined"){factory(exports)}else{factory(root.pdfjsWebOverlayManager={})}})(this,function(exports){var OverlayManager={overlays:{},active:null,register:function overlayManagerRegister(name,element,callerCloseMethod,canForceClose){return new Promise(function(resolve){var container;if(!name||!element||!(container=element.parentNode)){throw new Error("Not enough parameters.")}else if(this.overlays[name]){throw new Error("The overlay is already registered.")}this.overlays[name]={element:element,container:container,callerCloseMethod:callerCloseMethod||null,canForceClose:canForceClose||false};resolve()}.bind(this))},unregister:function overlayManagerUnregister(name){return new Promise(function(resolve){if(!this.overlays[name]){throw new Error("The overlay does not exist.")}else if(this.active===name){throw new Error("The overlay cannot be removed while it is active.")}delete this.overlays[name];resolve()}.bind(this))},open:function overlayManagerOpen(name){return new Promise(function(resolve){if(!this.overlays[name]){throw new Error("The overlay does not exist.")}else if(this.active){if(this.overlays[name].canForceClose){this._closeThroughCaller()}else if(this.active===name){throw new Error("The overlay is already active.")}else{throw new Error("Another overlay is currently active.")}}this.active=name;this.overlays[this.active].element.classList.remove("hidden");this.overlays[this.active].container.classList.remove("hidden");window.addEventListener("keydown",this._keyDown);resolve()}.bind(this))},close:function overlayManagerClose(name){return new Promise(function(resolve){if(!this.overlays[name]){throw new Error("The overlay does not exist.")}else if(!this.active){throw new Error("The overlay is currently not active.")}else if(this.active!==name){throw new Error("Another overlay is currently active.")}this.overlays[this.active].container.classList.add("hidden");this.overlays[this.active].element.classList.add("hidden");this.active=null;window.removeEventListener("keydown",this._keyDown);resolve()}.bind(this))},_keyDown:function overlayManager_keyDown(evt){var self=OverlayManager;if(self.active&&evt.keyCode===27){self._closeThroughCaller();evt.preventDefault()}},_closeThroughCaller:function overlayManager_closeThroughCaller(){if(this.overlays[this.active].callerCloseMethod){this.overlays[this.active].callerCloseMethod()}if(this.active){this.close(this.active)}}};exports.OverlayManager=OverlayManager});