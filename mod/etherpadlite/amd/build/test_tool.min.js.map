{"version":3,"file":"test_tool.min.js","sources":["../src/test_tool.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test tool for checking the connection and credentials of a given Etherpad Lite API-URL and API-key.\n *\n * @module     mod_etherpadlite/test_tool\n * @copyright  2025 Andr√© Menrath <andre.menrath@uni-graz.at>, University of Graz\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport {call as fetchMany} from 'core/ajax';\nimport {getString} from 'core/str';\n\nconst SELECTORS = {\n    TEST_TOOL_BUTTON: '#mod-etherpadlite-test-tool-button',\n};\n\n/**\n * Entrypoint of the JS.\n *\n * @method init\n */\nexport const init = () => {\n    if (window.location.pathname === '/admin/settings.php' || window.location.pathname === '/admin/search.php') {\n        registerListenerEvents();\n    }\n};\n\n/**\n * Register snippet related event listeners.\n *\n * @method registerListenerEvents\n */\nconst registerListenerEvents = () => {\n    const testButton = document.querySelector(SELECTORS.TEST_TOOL_BUTTON);\n\n     // If the button for the Connection Test Tool is not found, no listeners are registered.\n    if (!testButton) {\n        return;\n    }\n\n    // Add event listener which will trigger the connection test with the given Etherpad Lite API credentials.\n    testButton.addEventListener('click', (event) => {\n        event.preventDefault();\n        testConnection().catch(Notification.exception);\n    });\n\n    // Make the button clickable after the event listener is added.\n    if (testButton.hasAttribute('disabled')) {\n        testButton.removeAttribute('disabled');\n    }\n    if (testButton.classList.contains('disabled')) {\n        testButton.classList.remove('disabled');\n    }\n};\n\n/**\n * Execute the tests via webservice.\n *\n * @returns string The HTML of the test.\n */\nexport const getTestResults = () => fetchMany([{\n    methodname: 'mod_etherpadlite_test_tool',\n    args: {}\n}])[0];\n\n/**\n * Build the modal with the provided data.\n *\n * @method buildModal\n */\nconst testConnection = async() => {\n    let title = await getString('testmodaltitle', 'mod_etherpadlite');\n    let body;\n\n    const testResult = await getTestResults();\n\n    body = await Templates.render('mod_etherpadlite/test_tool_result', testResult);\n    Notification.alert(title, body);\n};\n"],"names":["SELECTORS","window","location","pathname","registerListenerEvents","testButton","document","querySelector","addEventListener","event","preventDefault","testConnection","catch","Notification","exception","hasAttribute","removeAttribute","classList","contains","remove","getTestResults","methodname","args","async","body","title","testResult","Templates","render","alert"],"mappings":";;;;;;;kNA4BMA,2BACgB,mDAQF,KACiB,wBAA7BC,OAAOC,SAASC,UAAmE,sBAA7BF,OAAOC,SAASC,UACtEC,gCASFA,uBAAyB,WACrBC,WAAaC,SAASC,cAAcP,4BAGrCK,aAKLA,WAAWG,iBAAiB,SAAUC,QAClCA,MAAMC,iBACNC,iBAAiBC,MAAMC,sBAAaC,cAIpCT,WAAWU,aAAa,aACxBV,WAAWW,gBAAgB,YAE3BX,WAAWY,UAAUC,SAAS,aAC9Bb,WAAWY,UAAUE,OAAO,cASvBC,eAAiB,KAAM,cAAU,CAAC,CAC3CC,WAAY,6BACZC,KAAM,MACN,gDAOEX,eAAiBY,cAEfC,KADAC,YAAc,kBAAU,iBAAkB,0BAGxCC,iBAAmBN,iBAEzBI,WAAaG,mBAAUC,OAAO,oCAAqCF,kCACtDG,MAAMJ,MAAOD"}