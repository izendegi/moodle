{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport placestore from 'mod_learningmap/placestore';\n\nconst circleRadius = 10;\n\n// Constants for updatePathDeclaration.\nconst targetPoints = {\n    firstPoint: 1,\n    secondPoint: 2,\n    bezierPoint: 3,\n};\n\nconst pathTypes = {\n    line: 1,\n    quadraticbezier: 2,\n};\n\nexport const init = () => {\n    // Load the needed template on startup for better execution speed.\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\n\n    // Variable for storing the mouse offset\n    var offset;\n\n    // Variable for draggable element\n    var dragel;\n\n    // Variables for storing the paths that need update of the first or\n    // the second coordinates.\n    var pathsToUpdateFirstPoint, pathsToUpdateSecondPoint;\n\n    // Variables for handling the currently selected elements\n    var selectedElement = null,\n        firstPlace = null,\n        secondPlace = null,\n        lastTarget = null;\n\n    // Variable for storing the selected element for the activity selector\n    var elementForActivitySelector = null;\n\n    // Variables for simulating double click on touch devices, set when the\n    // corresponding events are handled\n    var touchstart = false;\n    var touchend = false;\n    // Counter for touchmove events\n    var touchmove = 0;\n\n    // DOM nodes for the editor\n    let mapdiv = document.getElementById('learningmap-editor-map');\n    let code = document.getElementById('id_svgcode');\n\n    let svgdoc = new DOMParser().parseFromString(code.value, 'image/svg+xml');\n    let svgnode = svgdoc.querySelector('svg');\n\n    // DOM nodes for the activity selector\n    let activitySetting = document.getElementById('learningmap-activity-setting');\n    let activitySelector = document.getElementById('learningmap-activity-selector');\n    let activityStarting = document.getElementById('learningmap-activity-starting');\n    let activityTarget = document.getElementById('learningmap-activity-target');\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\n    let advancedSettingsIcon = document.getElementById('learningmap-advanced-settings-icon');\n\n    // Hide tree view as there is no preview file we can attach to\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\n    if (treeView) {\n        treeView.setAttribute('style', 'display: none;');\n    }\n\n    // Trigger click event on icon view to ensure that tree view is not active.\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\n    if (iconView) {\n        // Handle possible delay in form loading.\n        setTimeout(() => {\n            iconView.dispatchEvent(new Event('click'));\n        }, 1000);\n    }\n\n    // Attach listeners to the activity selector\n    if (activitySelector) {\n        // Show places that are not linked to an activity\n        activitySelector.addEventListener('change', function() {\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\n            if (activitySelector.value) {\n                let text = document.getElementById('text' + elementForActivitySelector);\n                if (text) {\n                    text.replaceChildren(svgdoc.createCDATASection(\n                        activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent\n                    ));\n                }\n                let title = document.getElementById('title' + elementForActivitySelector);\n                if (title) {\n                    title.replaceChildren(svgdoc.createCDATASection(\n                        activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent\n                    ));\n                }\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n            }\n            updateActivities();\n            updateCode();\n        });\n        // Add / remove a place to the starting places array\n        activityStarting.addEventListener('change', function() {\n            if (activityStarting.checked) {\n                placestore.addStartingPlace(elementForActivitySelector);\n            } else {\n                placestore.removeStartingPlace(elementForActivitySelector);\n            }\n            updateCode();\n        });\n        // Add / remove a place to the target places array\n        activityTarget.addEventListener('change', function() {\n            if (activityTarget.checked) {\n                placestore.addTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\n            } else {\n                placestore.removeTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\n            }\n            updateCode();\n        });\n    }\n\n    // Load placestore values from the hidden input field\n    let placestoreInput = document.getElementsByName('placestore')[0];\n    if (placestoreInput) {\n        placestore.loadJSON(placestoreInput.value);\n    }\n\n    // Mark all activities in the placestore as \"used\".\n    updateActivities();\n\n    // Attach listeners to the advanced settings div\n    if (advancedSettingsIcon) {\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\n        advancedSettingsIcon.addEventListener('click', function() {\n            if (advancedSettings.getAttribute('hidden') === null) {\n                hideAdvancedSettings();\n            } else {\n                advancedSettings.removeAttribute('hidden');\n                hideContextMenu();\n            }\n        });\n        let advancedSettingsClose = document.getElementById('learningmap-advanced-settings-close');\n        if (advancedSettingsClose) {\n            advancedSettingsClose.addEventListener('click', function() {\n                advancedSettings.setAttribute('hidden', '');\n            });\n        }\n\n        advancedSettingsLogic('hidepaths', placestore.getHidePaths, placestore.setHidePaths);\n        advancedSettingsLogic('usecheckmark', placestore.getUseCheckmark, placestore.setUseCheckmark);\n        advancedSettingsLogic('hover', placestore.getHover, placestore.setHover);\n        advancedSettingsLogic('pulse', placestore.getPulse, placestore.setPulse);\n        advancedSettingsLogic('showall', placestore.getShowall, placestore.setShowall);\n        advancedSettingsLogic('hidestroke', placestore.getHideStroke, placestore.setHideStroke);\n        advancedSettingsLogic('showtext', placestore.getShowText, placestore.setShowText, fixPlaceLabels);\n        advancedSettingsLogic('slicemode', placestore.getSliceMode, placestore.setSliceMode);\n        advancedSettingsLogic('showwaygone', placestore.getShowWayGone, placestore.setShowWayGone);\n    }\n\n    // Attach listener to the color choosers\n    colorChooserLogic('stroke', 'text');\n    colorChooserLogic('place');\n    colorChooserLogic('visited');\n\n    // Get SVG code from the (hidden) textarea field\n    if (code && mapdiv) {\n        mapdiv.replaceChildren(svgnode);\n    }\n    // Reload background image to get the correct width and height values\n    refreshBackgroundImage();\n    registerBackgroundListener();\n    updateCode();\n\n    // Enable dragging of places\n    makeDraggable(svgnode);\n\n    // Refresh stylesheet values from placestore\n    updateCSS();\n\n    // Add listeners for clicking and context menu\n    if (mapdiv) {\n        mapdiv.addEventListener('dblclick', dblclickHandler);\n        mapdiv.addEventListener('click', clickHandler);\n\n        mapdiv.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            showContextMenu(e);\n        }, false);\n    }\n    /**\n     * Shows the context menu at the current mouse position\n     * @param {*} e\n     */\n    function showContextMenu(e) {\n        unselectAll();\n        hideAdvancedSettings();\n        // Check for the existence of the target (could have vanished since the event started).\n        if (activitySetting && document.getElementById(e.target.id) !== null) {\n            if (e.touches) {\n                e = e.touches[0];\n            }\n            if (e.target.classList.contains('learningmap-place')) {\n                e.target.classList.add('learningmap-selected-activity-selector');\n                let activityId = placestore.getActivityId(e.target.id);\n                let scalingFactor = mapdiv.clientWidth / 800;\n                activitySetting.style.setProperty('--pos-x', e.target.cx.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--pos-y', e.target.cy.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\n                activitySetting.style.display = 'block';\n                document.getElementById('learningmap-activity-selector').value = activityId;\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\n                elementForActivitySelector = e.target.id;\n                updateActivities();\n            } else {\n                hideContextMenu();\n                hideAdvancedSettings();\n            }\n        }\n    }\n\n    /**\n     * Hides the context menu\n     */\n    function hideContextMenu() {\n        let e = document.getElementById(elementForActivitySelector);\n        if (e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        }\n        activitySetting.style.display = 'none';\n    }\n\n    let backgroundfileNode = document.getElementById('id_backgroundfile_fieldset');\n    if (backgroundfileNode) {\n        let observer = new MutationObserver(refreshBackgroundImage);\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n    }\n\n    /**\n     * Helper function for getting the right coordinates from the mouse\n     * @param {*} evt\n     * @returns {object}\n     */\n    function getMousePosition(evt) {\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return transformCoordinates(evt.clientX, evt.clientY);\n    }\n\n    /**\n     * Transforms client coordinates to SVG coordinates\n     * @param {number} x x coordinate to transform\n     * @param {number} y y coordinate to transform\n     * @returns {object} Object containing transformed x and y coordinate\n     */\n    function transformCoordinates(x, y) {\n        var CTM = dragel.getScreenCTM();\n        return {\n            x: (x - CTM.e) / CTM.a,\n            y: (y - CTM.f) / CTM.d\n        };\n    }\n\n    /**\n     * Enables dragging on an DOM node\n     * @param {*} el\n     */\n    function makeDraggable(el) {\n        dragel = el;\n        if (el) {\n            el.addEventListener('mousedown', startDrag);\n            el.addEventListener('mousemove', drag);\n            el.addEventListener('mouseup', endDrag);\n            el.addEventListener('mouseleave', endDrag);\n            el.addEventListener('touchstart', startTouch);\n            el.addEventListener('touchmove', drag);\n            el.addEventListener('touchend', endTouch);\n            el.addEventListener('touchleave', endTouch);\n            el.addEventListener('touchcancel', endTouch);\n        }\n\n        /**\n         * Function called whenn dragging starts.\n         * @param {*} evt\n         */\n        function startDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            pathsToUpdateFirstPoint = [];\n            pathsToUpdateSecondPoint = [];\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"cx\"));\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"cy\"));\n                // Get paths that need to be updated.\n                pathsToUpdateFirstPoint = placestore.getPathsWithFid(selectedElement.id);\n                pathsToUpdateSecondPoint = placestore.getPathsWithSid(selectedElement.id);\n            } else if (evt.target.nodeName == 'text') {\n                selectedElement = evt.target;\n                let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"dx\")) + place.cx.baseVal.value;\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"dy\")) + place.cy.baseVal.value;\n            } else if (evt.target.nodeName == 'path') {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                let pathPoint = transformCoordinates(evt.layerX, evt.layerY);\n                offset.x += pathPoint.x;\n                offset.y += pathPoint.y;\n            }\n        }\n\n        /**\n         * Function called during dragging. Continuously updates circles center coordinates and the\n         * coordinates of the touching paths.\n         * @param {*} evt\n         */\n        function drag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            // Count touchmove events\n            touchmove++;\n            if (selectedElement) {\n                var coord = getMousePosition(evt);\n                let cx = coord.x - offset.x;\n                let cy = coord.y - offset.y;\n                if (selectedElement.nodeName == 'text') {\n                    let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                    // Calculate the delta from the current mouse position to the corresponding place.\n                    // coord: current mouse position\n                    // offset: delta from the mouse position to the coordinates of the text node\n                    let dx = coord.x - offset.x - place.cx.baseVal.value;\n                    let dy = coord.y - offset.y - place.cy.baseVal.value;\n                    selectedElement.setAttributeNS(null, \"dx\", dx);\n                    selectedElement.setAttributeNS(null, \"dy\", dy);\n                }\n                if (selectedElement.nodeName == 'path') {\n                    selectedElement.setAttribute(\n                        'd',\n                        updatePathDeclaration(selectedElement.getAttribute('d'), coord.x, coord.y, targetPoints.bezierPoint)\n                    );\n                }\n                if (selectedElement.nodeName == 'circle') {\n                    selectedElement.setAttributeNS(null, \"cx\", cx);\n                    selectedElement.setAttributeNS(null, \"cy\", cy);\n                    let textNode = document.getElementById('text' + selectedElement.id);\n                    if (textNode !== null) {\n                        textNode.setAttributeNS(null, 'x', cx);\n                        textNode.setAttributeNS(null, 'y', cy);\n                    }\n                    pathsToUpdateFirstPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (pathNode !== null) {\n                            if (pathNode.nodeName == 'path') {\n                                pathNode.setAttribute(\n                                    'd',\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.firstPoint)\n                                );\n                            } else {\n                                pathNode.setAttribute('x1', cx);\n                                pathNode.setAttribute('y1', cy);\n                            }\n                        }\n                    });\n\n                    pathsToUpdateSecondPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (pathNode !== null) {\n                            if (pathNode.nodeName == 'path') {\n                                pathNode.setAttribute(\n                                    'd',\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.secondPoint)\n                                );\n                            } else {\n                                pathNode.setAttribute('x2', cx);\n                                pathNode.setAttribute('y2', cy);\n                            }\n                        }\n                    });\n                }\n            }\n        }\n\n        /**\n         * Function called when dragging ends.\n         * @param {*} evt\n         */\n        function endDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            selectedElement = null;\n            unselectAll();\n            updateCode();\n        }\n\n        /**\n         * Function called when touchstart event occurs.\n         * @param {*} evt\n         */\n        function startTouch(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (\n                evt.target.classList.contains('learningmap-draggable') ||\n                evt.target.nodeName == 'text' ||\n                evt.target.nodeName == 'path'\n            ) {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchmove = 0;\n                    touchend = false;\n                    setTimeout(\n                        (evt) => {\n                            if (touchmove < 3 && !touchend) {\n                                if (evt.touches) {\n                                    evt = evt.touches[0];\n                                }\n                                showContextMenu(evt);\n                            }\n                        },\n                        2000,\n                        evt\n                    );\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n                startDrag(evt);\n            } else {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchend = false;\n                    touchmove = 0;\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n            }\n        }\n\n        /**\n         * Function called when touchend, touchleave or touchcancel event occurs.\n         * @param {*} evt\n         */\n        function endTouch(evt) {\n            selectedElement = null;\n            touchend = true;\n            // If there was only a small move (<3 move events), this also counts as a click.\n            if (touchmove < 3 && touchstart) {\n                clickHandler(evt);\n            } else {\n                endDrag(evt);\n            }\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n        }\n\n        /**\n         * Updates the path declaration of lines and quadratic bezier curves setting one of the points.\n         * @param {string} oldDefinition SVG path definition string\n         * @param {number} targetX x coordinate of the point to set\n         * @param {number} targetY y coordinate of the point to set\n         * @param {number} targetP Which point to change (you can use the targetPoints constants here)\n         * @returns {string} Updated SVG path definition\n         */\n        function updatePathDeclaration(oldDefinition, targetX, targetY, targetP = targetPoints.firstPoint) {\n            let parts = oldDefinition.split(' ');\n            let fromX = 0;\n            let fromY = 0;\n            let toX = 0;\n            let toY = 0;\n            let bezierX = 0;\n            let bezierY = 0;\n            let pathType = pathTypes.line;\n\n            // The d attribute of an SVG path in a learning map can have two different formats (in this version):\n            // \"M x1 y1 L x2 y2\"        Line from x1, y1 to x2, y2\n            // \"M x1 y2 Q x3 y3 x2 y2\"  Quadratic bezier curve inside the triangle defined by x1, y1, x2, y2 and x3, y3.\n            for (let i = 0; i < parts.length; i++) {\n                // Every path contains the first point in that way.\n                if (parts[i] == 'M') {\n                    fromX = parseInt(parts[i + 1]);\n                    fromY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a direct line, so there are only two points in total.\n                if (parts[i] == 'L') {\n                    toX = parseInt(parts[i + 1]);\n                    toY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a bezier curve, there are three points in total.\n                if (parts[i] == 'Q') {\n                    bezierX = parseInt(parts[i + 1]);\n                    bezierY = parseInt(parts[i + 2]);\n                    toX = parseInt(parts[i + 3]);\n                    toY = parseInt(parts[i + 4]);\n                    i += 4;\n                    pathType = pathTypes.quadraticbezier;\n                }\n            }\n\n            switch (targetP) {\n                case targetPoints.firstPoint:\n                    fromX = targetX;\n                    fromY = targetY;\n                    break;\n                case targetPoints.secondPoint:\n                    toX = targetX;\n                    toY = targetY;\n                    break;\n                case targetPoints.bezierPoint:\n                    // Calculate the third triangle point for the bezier curve.\n                    bezierX = targetX * 2 - (fromX + toX) * 0.5;\n                    bezierY = targetY * 2 - (fromY + toY) * 0.5;\n                    pathType = pathTypes.quadraticbezier;\n                    break;\n            }\n\n            if (pathType == pathTypes.quadraticbezier) {\n                return 'M ' + fromX + ' ' + fromY + ' Q ' + bezierX + ' ' + bezierY + ', ' + toX + ' ' + toY;\n            } else {\n                return 'M ' + fromX + ' ' + fromY + ' L ' + toX + ' ' + toY;\n            }\n        }\n    }\n\n    /**\n     * Updates the form fields for the SVG code and the placestore from the editor.\n     */\n    function updateCode() {\n        if (code && mapdiv) {\n            code.innerHTML = mapdiv.innerHTML;\n        }\n        if (placestoreInput) {\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\n        }\n    }\n\n    /**\n     * Handles double clicks on the map\n     * @param {*} event\n     */\n    function dblclickHandler(event) {\n        hideContextMenu();\n        hideAdvancedSettings();\n        unselectAll();\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\n            event.target.classList.contains('learningmap-background-image')) {\n            addPlace(event);\n        } else if (event.target.classList.contains('learningmap-place')) {\n            if (lastTarget == event.target.id) {\n                lastTarget = null;\n                clickHandler(event);\n            } else {\n                removePlace(event);\n            }\n        } else if (event.target.classList.contains('learningmap-path')) {\n            removePath(event.target.id);\n        }\n        updateCode();\n    }\n\n    /**\n     * Returns an empty title tag with the given id.\n     * @param {*} id id for the title\n     * @returns {any}\n     */\n    function title(id) {\n        let title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        title.setAttribute('id', id);\n        return title;\n    }\n\n    /**\n     * Returns an text tag with the given id.\n     * @param {*} id id for the text\n     * @param {*} content content of the tag\n     * @param {*} x x coordinate of the text\n     * @param {*} y y coordinate of the text\n     * @returns {any}\n     */\n     function text(id, content, x, y) {\n        let text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttribute('id', id);\n        text.setAttribute('x', x);\n        text.setAttribute('y', y);\n        // Default value for delta: Circle radius * 1.5 (as a padding)\n        text.setAttribute('dx', circleRadius * 1.5);\n        text.setAttribute('dy', circleRadius * 1.5);\n        let textcontent = svgdoc.createCDATASection(content);\n        text.replaceChildren(textcontent);\n        return text;\n    }\n\n    /**\n     * Returns a circle tag with the given dimensions.\n     * @param {*} x x coordinate of the center\n     * @param {*} y y coordinate of the center\n     * @param {*} r radius\n     * @param {*} classes classes to add\n     * @param {*} id id of the circle\n     * @returns {any}\n     */\n    function circle(x, y, r, classes, id) {\n        let circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('class', classes);\n        circle.setAttribute('id', id);\n        circle.setAttribute('cx', x);\n        circle.setAttribute('cy', y);\n        circle.setAttribute('r', r);\n        return circle;\n    }\n\n    /**\n     * Returns a path between two points.\n     * @param {*} x1 x coordinate of the first point\n     * @param {*} y1 y coordinate of the first point\n     * @param {*} x2 x coordinate of the second point\n     * @param {*} y2 y coordinate of the second point\n     * @param {*} classes CSS classes to set\n     * @param {*} id id of the path\n     * @returns {any}\n     */\n     function path(x1, y1, x2, y2, classes, id) {\n        let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('class', classes);\n        path.setAttribute('id', id);\n        path.setAttribute('d', 'M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2);\n        return path;\n    }\n\n    /**\n     * Returns a link around a given child element. This function also adds a title element next\n     * to the child for accessibility.\n     * @param {*} child child item to set the link on\n     * @param {*} id id of the link\n     * @param {*} title title of the link\n     * @param {*} text text to describe the link\n     * @returns {any}\n     */\n    function link(child, id, title = null, text = null) {\n        let link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttribute('id', id);\n        link.setAttribute('xlink:href', '');\n        link.appendChild(child);\n        if (title !== null) {\n            link.appendChild(title);\n        }\n        if (text !== null) {\n            link.appendChild(text);\n        }\n        return link;\n    }\n\n    /**\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\n     * and adding titles (for accessibility).\n     * @param {*} event event causing the command\n     */\n    function addPlace(event) {\n        let placesgroup = document.getElementById('placesGroup');\n        let placeId = 'p' + placestore.getId();\n        let linkId = 'a' + placestore.getId();\n        var CTM = event.target.getScreenCTM();\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        let cx = (event.clientX - CTM.e) / CTM.a;\n        let cy = (event.clientY - CTM.f) / CTM.d;\n        placesgroup.appendChild(\n            link(\n                circle(cx, cy, circleRadius, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\n                linkId,\n                title('title' + placeId),\n                text('text' + placeId, '', cx, cy)\n            )\n        );\n        placestore.addPlace(placeId, linkId);\n    }\n\n    /**\n     * Handles single clicks on the background image.\n     * @param {*} event click event\n     * @returns {void}\n     */\n    function clickHandler(event) {\n        event.preventDefault();\n        hideContextMenu();\n        hideAdvancedSettings();\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\n            if (firstPlace === null) {\n                firstPlace = event.target.id;\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\n            } else {\n                secondPlace = event.target.id;\n                let fid = parseInt(firstPlace.replace('p', ''));\n                let sid = parseInt(secondPlace.replace('p', ''));\n                if (sid == fid) {\n                    return;\n                }\n                if (sid < fid) {\n                    let z = sid;\n                    sid = fid;\n                    fid = z;\n                }\n                addPath(fid, sid);\n                let first = document.getElementById(firstPlace);\n                if (first) {\n                    first.classList.remove('learningmap-selected');\n                }\n                firstPlace = null;\n                lastTarget = secondPlace;\n                secondPlace = null;\n            }\n        } else {\n            unselectAll();\n            firstPlace = null;\n        }\n    }\n    /**\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\n     * from all nodes\n     */\n    function unselectAll() {\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\n            e.classList.remove('learningmap-selected');\n        });\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        });\n    }\n\n    /**\n     * Adds a path between two places.\n     * @param {number} fid id of the first place (meant to be the smaller one)\n     * @param {number} sid id of the second place (meant to be the bigger one)\n     */\n    function addPath(fid, sid) {\n        let pid = 'p' + fid + '_' + sid;\n        if (document.getElementById(pid) === null) {\n            let pathsgroup = document.getElementById('pathsGroup');\n            let first = document.getElementById('p' + fid);\n            let second = document.getElementById('p' + sid);\n            if (pathsgroup && first && second) {\n                pathsgroup.appendChild(\n                    path(\n                        first.cx.baseVal.value,\n                        first.cy.baseVal.value,\n                        second.cx.baseVal.value,\n                        second.cy.baseVal.value,\n                        'learningmap-path',\n                        pid\n                    )\n                );\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\n            }\n        }\n    }\n\n    /**\n     * Removes a place from the SVG and the placestore. This function also removes all\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\n     * place.\n     * @param {any} event event causing the remove order\n     */\n    function removePlace(event) {\n        let place = document.getElementById(event.target.id);\n        let parent = place.parentNode;\n        removePathsTouchingPlace(event.target.id);\n        placestore.removePlace(event.target.id);\n        parent.removeChild(place);\n        parent.parentNode.removeChild(parent);\n\n        updateCode();\n    }\n\n    /**\n     * Removes all paths touching a certain place\n     * @param {number} id id of the place\n     */\n    function removePathsTouchingPlace(id) {\n        placestore.getTouchingPaths(id).forEach(\n            function(e) {\n                removePath(e.id);\n            }\n        );\n    }\n\n    /**\n     * Removes a path from the SVG and from the placestore\n     * @param {number} id id of the path\n     */\n    function removePath(id) {\n        let path = document.getElementById(id);\n        if (path !== null) {\n            path.parentNode.removeChild(path);\n            placestore.removePath(id);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let previewimage = document.getElementsByClassName('realpreview');\n        if (previewimage.length > 0) {\n            let background = document.getElementById('learningmap-background-image');\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            background.setAttribute('xlink:href', backgroundurl);\n        }\n    }\n\n    /**\n     * Adds an eventListener to the background image for watching file changes and updating\n     * height and width of the image.\n     */\n    function registerBackgroundListener() {\n        let background = document.getElementById('learningmap-background-image');\n        if (background) {\n            background.addEventListener('load', function() {\n                background.removeAttribute('height');\n                let height = parseInt(background.getBBox().height);\n                let width = background.getBBox().width;\n                placestore.setBackgroundDimensions(width, height);\n                svgnode.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\n                background.setAttribute('width', width);\n                background.setAttribute('height', height);\n                updateCode();\n            });\n        }\n    }\n\n    /**\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\n     * Calls updateCode() when completed.\n     */\n    function updateCSS() {\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\n                updateCode();\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    }\n\n    /**\n     * Updates the activity selector to highlight the activities already used\n     * and to show the alert for hidden activities.\n     */\n    function updateActivities() {\n        let activities = placestore.getAllActivities();\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        activityHiddenWarning.setAttribute('hidden', '');\n        options.forEach(function(n) {\n            if (activities.includes(n.value)) {\n                n.classList.add('learningmap-used-activity');\n                if (n.selected) {\n                    if (n.getAttribute('data-activity-hidden') == true) {\n                        activityHiddenWarning.removeAttribute('hidden');\n                    }\n                }\n            } else {\n                n.classList.remove('learningmap-used-activity');\n            }\n        });\n    }\n\n    /**\n     * Adds the event listener to the color chooser buttons.\n     * @param {*} name name of the color\n     * @param {*} secondValue name of a second placestore value that has to be changed along\n     */\n    function colorChooserLogic(name, secondValue = '') {\n        let colorChooser = document.getElementById('learningmap-color-' + name);\n        if (colorChooser) {\n            colorChooser.addEventListener('change', function() {\n                placestore.setColor(name, colorChooser.value);\n                if (secondValue != '') {\n                    placestore.setColor(secondValue, colorChooser.value);\n                }\n                updateCSS();\n            });\n            colorChooser.value = placestore.getColor(name);\n        }\n    }\n\n    /**\n     * Adds the event listener to advanced settings menu items\n     * @param {*} name Name of the item\n     * @param {*} getCall Method of placestore to call to read value\n     * @param {*} setCall Method of placestore to call to save value\n     * @param {*} callback Additional callback after value is saved\n     */\n    function advancedSettingsLogic(name, getCall, setCall, callback = null) {\n        let settingItem = document.getElementById('learningmap-advanced-setting-' + name);\n        if (settingItem) {\n            settingItem.checked = getCall.call(placestore);\n            settingItem.addEventListener('change', function() {\n                setCall.call(placestore, settingItem.checked);\n                if (callback !== null) {\n                    callback();\n                }\n                updateCSS();\n            });\n        }\n    }\n\n    /**\n     * Adds missing text nodes\n     */\n    function fixPlaceLabels() {\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        let places = placestore.getPlaces();\n        for (const place of places) {\n            if (document.getElementById('text' + place.id) === null) {\n                let content = '';\n                for (const option of options) {\n                    if (option.value == place.linkedActivity) {\n                        content = option.textContent;\n                        break;\n                    }\n                }\n                let placeNode = document.getElementById(place.id);\n                let textNode = text('text' + place.id, content, placeNode.cx.baseVal.value, placeNode.cy.baseVal.value);\n                placeNode.parentNode.appendChild(textNode);\n            }\n        }\n    }\n\n    /**\n     * Hides the advanced settings menu.\n     */\n    function hideAdvancedSettings() {\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\n        advancedSettings.setAttribute('hidden', '');\n    }\n};\n"],"names":["targetPoints","pathTypes","offset","dragel","pathsToUpdateFirstPoint","pathsToUpdateSecondPoint","prefetchTemplates","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","svgdoc","DOMParser","parseFromString","value","svgnode","querySelector","activitySetting","activitySelector","activityStarting","activityTarget","activityHiddenWarning","advancedSettingsIcon","treeView","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","setActivityId","text","replaceChildren","createCDATASection","textContent","title","classList","remove","add","updateActivities","updateCode","checked","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","placestoreInput","getElementsByName","loadJSON","advancedSettings","getAttribute","hideAdvancedSettings","removeAttribute","hideContextMenu","advancedSettingsClose","advancedSettingsLogic","placestore","getHidePaths","setHidePaths","getUseCheckmark","setUseCheckmark","getHover","setHover","getPulse","setPulse","getShowall","setShowall","getHideStroke","setHideStroke","getShowText","setShowText","options","Array","from","getElementsByTagName","places","getPlaces","place","id","content","option","linkedActivity","placeNode","textNode","cx","baseVal","cy","parentNode","appendChild","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone","showContextMenu","e","unselectAll","target","touches","contains","activityId","getActivityId","scalingFactor","clientWidth","style","setProperty","clientHeight","display","isStartingPlace","isTargetPlace","colorChooserLogic","refreshBackgroundImage","background","height","parseInt","getBBox","width","setBackgroundDimensions","registerBackgroundListener","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","nodeName","dblclickHandler","endTouch","getMousePosition","x","getAttributeNS","y","getPathsWithFid","getPathsWithSid","pathPoint","transformCoordinates","layerX","layerY","coord","dx","dy","setAttributeNS","updatePathDeclaration","forEach","path","pathNode","clickHandler","oldDefinition","targetX","targetY","targetP","parts","split","fromX","fromY","toX","toY","bezierX","bezierY","pathType","i","length","makeDraggable","updateCSS","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","clientX","clientY","CTM","getScreenCTM","a","f","d","innerHTML","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","child","link","createElementNS","r","classes","circle","addPlace","parent","getTouchingPaths","removePath","removePlace","removeChild","circleRadius","textcontent","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","addPath","getElementsByClassName","previewimage","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","activities","getAllActivities","n","selected","name","secondValue","colorChooser","setColor","getColor","getCall","setCall","callback","settingItem","call"],"mappings":"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"}